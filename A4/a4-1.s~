#---------------------------------------------------------------
# Assignment:           4
# Due Date:             April 1, 2016
# Name:                 Chuan Yang
# Unix ID:              chuan1
# Lecture Section:      B1
# Lab Section:          H3
# Teaching Assistant(s):   ----- -----
#---------------------------------------------------------------
# run withe command : xspim -mapped_io -exception_file lab4-exception.s -file a4-pyramid.s
#---------------------------------------------------------------



	.data
input_command: .asciiz "Please input the command (i, d, r, l, q):"	
N: .word 1
K: .word 0
command: .space 2
info1: .asciiz  "pyramid: N = "
info2: .asciiz  ", K = "
i: .byte 'i'		# check the input
d: .byte 'd'
r: .byte 'r'
l: .byte 'l'
q: .byte 'q'
s_v0:     .word 0
s_a0:     .word 0
char_fill:  .byte  '*'
char_space: .byte  ' '

	.text
main:	
	beqz $s2, print_info_pyramid_1 # print the initial pyramid

back_main:
	addi $s2, $s2, 1
	# Enable keyboard interrupts	  
	li	$a3, 0xffff0000        # base address of I/O
	li	$s1, 2		       # $s1= 0x 0000 0002
	sw 	$s1, 0($a3)	       # enable keyboard interrupts

	# Enable global interrupts
	li	$s1, 0x0000ff01	       # set IE= 1 (enable interrupts) , EXL= 0
	mtc0	$s1, $12	       # SR (=R12) = enable bits


loop:	 beq  $t0,$t0, loop	       # infinite loop


	.globl  lab4_handler   




lab4_handler:
	
	# Save $at, $v0, and $a0
	.set noat
	move $k1 $at		# Save $at
	.set at
	sw   $v0 s_v0		# Not re-entrant and we can't trust $sp
	sw $a0, s_a0		# But we need to use these registers

	# Identify the interrupt source
	mfc0   $k0, $13		# $k0 = Cause Reg (R13)
	srl    $a0, $k0, 11	# isolate IP3 (interrupt bit 1) (for keyboard)
	andi   $a0, 0x1
	bgtz   $a0, check_input
	b   lab4_handler_ret

check_input:
	li  $t0, 0xffff0004		# get the information from the keyboard
	lw  $t1, 0($t0)
	
	#li  $t0, 0xffff000c		# debug
	#sw  $t1, 0($t0)

#check the input (i, d, r, l, q)

	lb  $t0, i	
	beq $t1, $t0, increase_N	# if t1 = i
	
	lb  $t0, d
	beq $t1, $t0, decrease_N	# if t1 = d

	lb  $t0, r
	beq $t1, $t0, increase_K	# if t1 = r

	lb  $t0, l
	beq $t1, $t0, decrease_K	# if t1 = l

	lb  $t0, q
	beq $t1, $t0, exit		# if t1 = q

	b   lab4_handler_ret		# else : END

increase_N:			# N += 1
	lw  $t0, N
	addi $t0, $t0, 1
	sw  $t0, N
	b   lab4_handler_ret

decrease_N:			# N -= 1
	lw  $t0, N
	addi $t0, $t0, -1
	sw  $t0, N
	b   lab4_handler_ret
		
increase_K:			# K += 1
	lw  $t0, K
	addi $t0, $t0, 1
	sw  $t0, K
	b   lab4_handler_ret

decrease_K:			# K -= 1
	lw  $t0, K
	addi $t0, $t0, -1
	sw  $t0, K
	b   lab4_handler_ret

exit: 	li $v0, 10		# exit
	syscall



print_info_pyramid_1:

# print the line information for the pyramid
	la  $a0, info1
	li  $v0, 4
	syscall
	lw  $a0, N
	li  $v0, 1
	syscall
	la  $a0, info2
	li  $v0, 4
	syscall
	lw  $a0, K
	li  $v0, 1
	syscall
	jal print_NL

	addi  $sp, $sp, -8		# allocate frame: $a0, $a1
	lw    $a0, N	  		# $a0= N
	lw    $a1, K			# $a1= K
	jal   pyramid			# call pyramid(N,K)
	j     back_main	



print_info_pyramid_2:

# print the line information for the pyramid
	la  $a0, info1
	li  $v0, 4
	syscall
	lw  $a0, N
	li  $v0, 1
	syscall
	la  $a0, info2
	li  $v0, 4
	syscall
	lw  $a0, K
	li  $v0, 1
	syscall
	jal print_NL

	addi  $sp, $sp, -8		# allocate frame: $a0, $a1
	lw    $a0, N	  		# $a0= N
	lw    $a1, K			# $a1= K
	jal   pyramid			# call pyramid(N,K)
	j     back			# jump back to the main function

pyramid:  
	  addi $sp, $sp, -12		# allocate frame: $a0, $a1, $ra
	  sw   $a0, 12($sp)		# store $a0= N in caller's frame
	  sw   $a1, 16($sp)		# store $a1= K in caller's frame
	  sw   $ra,  8($sp)		# store $ra in pyramid's frame	

	  li   $t0, 2			# $t0= 2
	  ble  $a0, $t0, pyramid_line	# n <= 2: goto write line
	  addi $a0, $a0, -2		# n= n-2
	  addi $a1, $a1, 1              # k= k+1
	  jal  pyramid

pyramid_line:
	  lb   $a0, char_space		# $a0 = ' '
	  lw   $a1, 16($sp)		# $a1= K
	  jal  write_char

	  lb   $a0, char_fill		# $a0 = '*'
	  lw   $a1, 12($sp)		# $a1= N
	  jal  write_char

	  jal  print_NL			# print NL


pyramid_end:
	  lw   $ra, 8($sp)		# restore $ra
	  addi $sp, $sp, 12		# release stack frame
	  jr   $ra  			# return

# ------------------------------
# function write_char ($a0= char, $a1= count)
#

write_char:
	  beqz  $a1, write_char_end	# $a1 == 0: return
	  li    $v0, 11			# print character
	  syscall
	  addi  $a1, $a1, -1		# $a1 = $a1 -1
	  b     write_char

write_char_end:
	  jr    $ra		        # return


print_NL:
          li   $a0, 0xA   # newline character
          li   $v0, 11
          syscall
          jr    $ra

lab4_handler_ret:
	j     print_info_pyramid_2	# print the pyramid and information
back:	lw  $v0  s_v0		# restore $v0, $a0, and $at
	lw  $a0, s_a0

	.set noat
	move $at $k1		# Restore $at
	.set at
	mtc0 $0 $13		# Clear Cause register
	mfc0  $k0 $12		# Set Status register
	ori   $k0 0x1		# Interrupts enabled
	mtc0  $k0 $12
	eret			# exception return









